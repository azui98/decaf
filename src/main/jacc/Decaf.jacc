// Decaf grammar

%package decaf.frontend.parsing

%{
import decaf.frontend.tree.Tree.*;

import java.util.Optional;
%}

%class DecafJaccParser
%extends JaccParser.BaseParser
%interface JaccTokens
%next nextToken()
%get token
%semantic SemValue : semValue

%token VOID         BOOL        INT         STRING      CLASS
%token NULL         EXTENDS     THIS        WHILE       FOR
%token IF           ELSE        RETURN      BREAK       NEW
%token PRINT        READ_INTEGER            READ_LINE   FUN
%token BOOL_LIT     INT_LIT     STRING_LIT  ABSTRACT    VAR
%token IDENTIFIER   AND         OR          STATIC      INSTANCE_OF
%token LESS_EQUAL   GREATER_EQUAL           EQUAL       NOT_EQUAL     DEDUCE
%token '+'  '-'  '*'  '/'  '%'  '='  '>'  '<'  '.'
%token ','  ';'  '!'  '('  ')'  '['  ']'  '{'  '}'

%left DEDUCE
%left OR
%left AND
%nonassoc EQUAL NOT_EQUAL
%nonassoc LESS_EQUAL GREATER_EQUAL '<' '>'
%left  '+' '-'
%left  '*' '/' '%'
%nonassoc UMINUS '!'
%nonassoc '[' '.'
%nonassoc ')' EMPTY
%nonassoc ELSE

%start TopLevel

%%

// Warning: never do `$$.xxx = ???` until reassignment, e.g. `$$ = $1`.
// Why? Because the time when we enter the action code you write, `$$` may currently points to some semValue you have
// already created. If you do `$$.expr = some expression`, then the previously created semValue is also modified!
// To avoid any potential bugs, you must reassign `$$` to a value that you know well (e.g. `$1`),
// before overwrite its members.

// A group of helper methods with prefix `sv` are provided in `SemValue`, go ahead and use them!

// Classes and fields

TopLevel        :   ClassList
                    {
                        tree = new TopLevel($1.classList, $1.pos);
                    }
                ;

ClassList       :   ClassList ClassDef
                    {
                        $$ = $1;
                        $$.classList.add($2.clazz);
                    }
                |   ClassDef
                    {
                        $$ = svClasses($1.clazz);
                    }
                ;

ClassDef        :   CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(false, $2.id, Optional.ofNullable($3.id), $5.fieldList, $1.pos));
                    }
                |	ABSTRACT CLASS Id ExtendsClause '{' FieldList '}'
                    {
                        $$ = svClass(new ClassDef(true, $3.id, Optional.ofNullable($4.id), $6.fieldList, $2.pos));
                    }
                ;

ExtendsClause   :   EXTENDS Id
                    {
                        $$ = $2;
                    }
                |   /* empty */
                    {
                        $$ = svId(null);
                    }
                ;

FieldList       :   FieldList Var ';'
                    {
                        $$ = $1;
                        $$.fieldList.add(new VarDef($2.type, $2.id, $2.pos));
                    }
                |   FieldList MethodDef
                    {
                        $$ = $1;
                        $$.fieldList.add($2.field);
                    }
                |   /* empty */
                    {
                        $$ = svFields();
                    }
                ;

Var             :   Type Id
                    {
                        $$ = svVar($1.type, $2.id, $2.pos);
                    }
                ;

MethodDef       :   STATIC Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, true, $3.id, $2.type, $5.varList, Optional.ofNullable($7.block), $3.pos));
                    }
                |   Type Id '(' VarList ')' Block
                    {
                        $$ = svField(new MethodDef(false, false, $2.id, $1.type, $4.varList, Optional.ofNullable($6.block), $2.pos));
                    }
                |   ABSTRACT Type Id '(' VarList ')' ';'
                    {
                        $$ = svField(new MethodDef(true, false, $3.id, $2.type, $5.varList, Optional.empty(), $3.pos));
                    }
                ;

VarList         :   VarList1
                    {
                        $$ = $1;
                    }
                |   /* empty */
                    {
                        $$ = svVars();
                    }
                ;

VarList1        :   VarList1 ',' Var
                    {
                        $$ = $1;
                        $$.varList.add(new LocalVarDef(Optional.ofNullable($3.type), $3.id, $3.pos));
                    }
                |   Var
                    {
                        $$ = svVars(new LocalVarDef(Optional.ofNullable($1.type), $1.id, $1.pos));
                    }
                ;

TypeList        :   TypeList1 { $$ = $1; } | /* empty */ { $$ = svTypes(); }
				
TypeList1       :   TypeList ',' Type
                    {
                        $$ = $1;
                        $$.typeList.add($3.type);
                    }
                |   Type
                    {
                        $$ = svTypes($1.type);
                    }
                ;

// Types

Type            :   INT
                    {
                        $$ = svType(new TInt($1.pos));
                    }
                |   BOOL
                    {
                        $$ = svType(new TBool($1.pos));
                    }
                |   STRING
                    {
                        $$ = svType(new TString($1.pos));
                    }
                |   VOID
                    {
                        $$ = svType(new TVoid($1.pos));
                    }
                |   CLASS Id
                    {
                        $$ = svType(new TClass($2.id, $1.pos));
                    }
                |   Type '[' ']'
                    {
                        $$ = svType(new TArray($1.type, $1.type.pos));
                    }
				|   Type '(' TypeList ')'
					{
						$$ = svType(new TFunc($1.type, $3.typeList, $1.type.pos));
					}
                ;

// Statements

Stmt            :   Block
                    {
                        $$ = svStmt($1.block);
                    }
                |   SimpleStmt ';'
                    {
                        if ($1.stmt == null) {
                            $$ = svStmt(new Skip($2.pos));
                        } else {
                            $$ = $1;
                        }
                    }
                |   IF '(' Expr ')' Stmt ElseClause
                    {
                        $$ = svStmt(new If($3.expr, $5.stmt, Optional.ofNullable($6.stmt), $1.pos));
                    }
                |   WHILE '(' Expr ')' Stmt
                    {
                        $$ = svStmt(new While($3.expr, $5.stmt, $1.pos));
                    }
                |   FOR '(' SimpleStmt ';' Expr ';' SimpleStmt ')' Stmt
                    {
                        if ($3.stmt == null) $3.stmt = new Skip($4.pos);
                        if ($7.stmt == null) $7.stmt = new Skip($8.pos);
                        $$ = svStmt(new For($3.stmt, $5.expr, $7.stmt, $9.stmt, $1.pos));
                    }
                |   BREAK ';'
                    {
                        $$ = svStmt(new Break($1.pos));
                    }
                |   RETURN ExprOpt ';'
                    {
                        $$ = svStmt(new Return(Optional.ofNullable($2.expr), $1.pos));
                    }
                |   PRINT '(' ExprList ')' ';'
                    {
                        $$ = svStmt(new Print($3.exprList, $1.pos));
                    }
                ;

Block           :   '{' StmtList '}'
                    {
                        $$ = svBlock(new Block($2.stmtList, $1.pos));
                    }
                ;

LambdaBlock           :   '{' StmtList '}'
                    {
                        $$ = svLambdaBlock(new LambdaBlock($2.stmtList, $1.pos));
                    }
                ;

StmtList        :   StmtList Stmt
                    {
                        $$ = $1;
                        $$.stmtList.add($2.stmt);
                    }
                |   /* empty */
                    {
                        $$ = svStmts();
                    }
                ;

SimpleStmt      :   Var Initializer
                    {
                        $$ = svStmt(new LocalVarDef(Optional.ofNullable($1.type), $1.id, $2.pos, Optional.ofNullable($2.expr), $1.pos));
                    }
                |   LValue '=' Expr
                    {
                        $$ = svStmt(new Assign($1.lValue, $3.expr, $2.pos));
                    }
                |   Expr
                    {
                        $$ = svStmt(new ExprEval($1.expr, $1.expr.pos));
                    }
                |   /* empty */
                    {
                        $$ = svStmt(null);
                    }
				|   VAR Id '=' Expr
					{
						$$ = svStmt(new LocalVarDef(Optional.empty(), $2.id, $3.pos, Optional.ofNullable($4.expr), $2.pos));
						//System.out.println($4);
					}
                ;

Initializer     :   '=' Expr
                    {
                        $$ = svExpr($2.expr);
                        $$.pos = $1.pos;
                    }
                |   /* empty */
                    {
                        $$ = svExpr(null);
                    }
                ;

ElseClause      :   ELSE Stmt
                    {
                        $$ = $2;
                    }
                |   /* empty */             %prec EMPTY
                    {
                        $$ = svStmt(null);
                    }
                ;

ExprOpt         :   Expr
                    {
                        $$ = $1;
                    }
                |   /* empty */
                    {
                        $$ = svExpr(null);
                    }
                ;

// Expressions

Expr            :   Literal
                    {
                        $$ = $1;
                    }
                |   THIS
                    {
                        $$ = svExpr(new This($1.pos));
                    }
                |   LValue
                    {
                        $$ = svExpr($1.lValue);
                    }
                |   Expr '(' ExprList ')'
                    {
                        $$ = svExpr(new Call($1.expr, $3.exprList, $2.pos));
                    }
                |   Expr '+' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.ADD, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '-' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.SUB, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '*' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.MUL, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '/' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.DIV, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '%' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.MOD, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr EQUAL Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.EQ, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr NOT_EQUAL Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.NE, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '<' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.LT, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr '>' Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.GT, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr LESS_EQUAL Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.LE, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr GREATER_EQUAL Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.GE, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr AND Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.AND, $1.expr, $3.expr, $2.pos));
                    }
                |   Expr OR Expr
                    {
                        $$ = svExpr(new Binary(BinaryOp.OR, $1.expr, $3.expr, $2.pos));
                    }
                |   '(' Expr ')'
                    {
                        $$ = $2;
                    }
                |   '-' Expr                %prec UMINUS
                    {
                        $$ = svExpr(new Unary(UnaryOp.NEG, $2.expr, $1.pos));
                    }
                |   '!' Expr
                    {
                        $$ = svExpr(new Unary(UnaryOp.NOT, $2.expr, $1.pos));
                    }
                |   READ_INTEGER '(' ')'
                    {
                        $$ = svExpr(new ReadInt($1.pos));
                    }
                |   READ_LINE '(' ')'
                    {
                        $$ = svExpr(new ReadLine($1.pos));
                    }
                |   NEW Id '(' ')'
                    {
                        $$ = svExpr(new NewClass($2.id, $1.pos));
                    }
                |   NEW Type '[' Expr ']'
                    {
                        $$ = svExpr(new NewArray($2.type, $4.expr, $1.pos));
                    }
                |   INSTANCE_OF '(' Expr ',' Id ')'
                    {
                        $$ = svExpr(new ClassTest($3.expr, $5.id, $1.pos));
                    }
                |   '(' CLASS Id ')' Expr
                    {
                        $$ = svExpr(new ClassCast($5.expr, $3.id, $5.expr.pos));
                    }
				|   LambdaEx
					{
						$$ = $1;
					}
                ;

LambdaEx        :	FUN '(' VarList ')' DEDUCE Expr
					{
						$$ = svExpr(new Lambda($3.varList, $6.expr, $1.pos));
					}
				|   FUN '(' VarList ')' LambdaBlock
					{
						$$ = svExpr(new Lambda($3.varList, $5.lambdaBlock, $1.pos));
					}
				|   '(' LambdaEx ')'
					{
						$$ = $2;
					}
                ;

Literal         :   INT_LIT
                    {
                        $$ = svExpr(new IntLit($1.intVal, $1.pos));
                    }
                |   BOOL_LIT
                    {
                        $$ = svExpr(new BoolLit($1.boolVal, $1.pos));
                    }
                |   STRING_LIT
                    {
                        $$ = svExpr(new StringLit($1.strVal, $1.pos));
                    }
                |   NULL
                    {
                        $$ = svExpr(new NullLit($1.pos));
                    }
                ;

LValue          :   Receiver Id
                    {
                        $$ = svLValue(new VarSel(Optional.ofNullable($1.expr), $2.id, $2.pos));
                    }
                |   Expr '[' Expr ']'
                    {
                        $$ = svLValue(new IndexSel($1.expr, $3.expr, $2.pos));
                    }
                ;

Receiver        :   Expr '.'
                    {
                        $$ = $1;
                    }
                |   /* empty */
                    {
                        $$ = svExpr(null);
                    }
                ;

ExprList        :   ExprList1
                    {
                        $$ = $1;
                    }
                |   /* empty */
                    {
                        $$ = svExprs();
                    }
                ;

ExprList1       :   ExprList1 ',' Expr
                    {
                        $$ = $1;
                        $$.exprList.add($3.expr);
                    }
                |   Expr
                    {
                        $$ = svExprs($1.expr);
                    }
                ;

// identifier

Id              :   IDENTIFIER
                    {
                        $$ = svId(new Id($1.strVal, $1.pos));
                    }
                ;

%%
